[{"form_header":[{"form_header_id":"447a3187-29a9-48ec-99d6-9b6b25aad0bb","form_name":"Sorting","form_program":"eventform.asp","form_code":"Sorting","update_log_id":"f31a3231-2a4a-4bb2-b0b9-c2337f2ab44f","form_family_id":"760c9119-4307-41ed-a966-6cebb51ef3d7","is_default":false,"dt_tm":"2023-11-02T09:25:17.987","form_height":null,"form_width":null,"on_save":null,"list_condition":"event_log.is_locked=1","before_save":null,"help_file":null,"is_system":false,"user_defined":true,"copied_from_form_header_id":null,"on_delete":null,"is_template":false,"is_group_event_form":false,"is_deleted":false,"form_size_percentage":null,"agency_help_file":null,"is_print_agency":true,"is_imported":false,"original_evolv_cs_id":null,"dt_tm_tzo":null,"is_delivered_on_install":false,"form_program_mobile":"StandardForm","on_save_jq":null,"before_save_jq":null,"on_delete_jq":null,"driving_forms_line_id":null,"help_content_id":null,"script_file_links":null,"form_program_xb":"Form.aspx","original_int_id":-2298,"is_active":true,"before_load":null,"before_load_jq":null,"after_load":"var win = window.open(\"\", \"myEvolv Main\")\r\n\r\nvar template = `\r\n<head>\r\n<style>\r\n* {\r\n    font-family: 'Source Sans Pro', sans-serif;\r\n}\r\n\r\n.draggable-table {\r\n\tposition: absolute;\r\n\ttop: 25%;\r\n\tleft: 20%;\r\n  width: 60%;\r\n  height: 50%;\r\n  border-collapse: collapse;\r\n  background: white;  \r\n  -webkit-box-shadow: 0px 0px 10px 8px rgba(0, 0, 0, 0.1);\r\n          box-shadow: 0px 0px 10px 8px rgba(0, 0, 0, 0.1);  \r\n  \r\n  .draggable-table__drag {\r\n      font-size: .95em;\r\n      font-weight: lighter;\r\n      text-transform: capitalize;    \r\n      position: absolute;\r\n      width: 100%;\r\n      text-indent: 50px;    \r\n      border: 1px solid #f1f1f1;\r\n      z-index: 10;\r\n      cursor: grabbing;\r\n      -webkit-box-shadow: 2px 2px 3px 0px rgba(0, 0, 0, 0.05);\r\n              box-shadow: 2px 2px 3px 0px rgba(0, 0, 0, 0.05); \r\n    \r\n      opacity: 1;\r\n  }  \r\n  \r\n  thead {\r\n    \r\n    th {\r\n      height: 25px;\r\n      font-weight: bold;\r\n      text-transform: capitalize;\r\n      padding: 10px;\r\n      user-select: none;\r\n    }\r\n  }\r\n  \r\n  tbody {\r\n    \r\n    tr {\r\n      cursor: grabbing;\r\n      \r\n      td {\r\n        font-size: .95em;\r\n        font-weight: lighter;\r\n        text-transform: capitalize;\r\n        text-indent: 50px;\r\n        padding: 10px;  \r\n        user-select: none;\r\n        border-top: 1px solid whitesmoke;\r\n      }\r\n    }\r\n    \r\n    tr:nth-child(even) {\r\n        background-color: #f7f7f7;\r\n    }\r\n\r\n    tr:nth-child(odd) {\r\n        background-color: #ffffff;\r\n    }    \r\n    \r\n    tr.is-dragging {\r\n        background: #f1c40f;\r\n\r\n        td {\r\n            color: #ffe683;\r\n        }\r\n    }    \r\n  }\r\n}\r\n</style>\r\n</head>\r\n<body>\r\n<table id=\"table\" class=\"draggable-table\">\r\n  <thead>\r\n    <th>Name</th>\r\n  </thead>\r\n  <tbody>\r\n ${win.aliases.map(x=> `\r\n<tr>\r\n<td>${x}</td>\r\n</tr>`).join('\\n')}\r\n  </tbody>\r\n</table>\r\n<button onclick=\"returnToMain()\">Finish Sorting</button>\r\n<script>\r\nfunction returnToMain() {\r\n  let win = window.open(\"\", \"myEvolv Main\")\r\n  win.aliases = $(\".draggable-table tbody tr td\").map(function () {return this.outerText}).toArray()\r\n\r\n}\r\n</script>\r\n<script id=\"rendered-js\">\r\n(function() {\r\n  \"use strict\";\r\n  \r\n  const table = document.getElementById('table');\r\n  const tbody = table.querySelector('tbody');\r\n  \r\n  var currRow = null,\r\n      dragElem = null,\r\n      mouseDownX = 0,\r\n      mouseDownY = 0,         \r\n      mouseX = 0,\r\n      mouseY = 0,      \r\n      mouseDrag = false;  \r\n  \r\n  function init() {\r\n    bindMouse();\r\n  }\r\n  \r\n  function bindMouse() {\r\n    document.addEventListener('mousedown', (event) => {\r\n      if(event.button != 0) return true;\r\n      \r\n      let target = getTargetRow(event.target);\r\n      if(target) {\r\n        currRow = target;\r\n        addDraggableRow(target);\r\n        currRow.classList.add('is-dragging');\r\n\r\n\r\n        let coords = getMouseCoords(event);\r\n        mouseDownX = coords.x;\r\n        mouseDownY = coords.y;      \r\n\r\n        mouseDrag = true;   \r\n      }\r\n    });\r\n    \r\n    document.addEventListener('mousemove', (event) => {\r\n      if(!mouseDrag) return;\r\n      \r\n      let coords = getMouseCoords(event);\r\n      mouseX = coords.x - mouseDownX;\r\n      mouseY = coords.y - mouseDownY;  \r\n      \r\n      moveRow(mouseX, mouseY);\r\n    });\r\n    \r\n    document.addEventListener('mouseup', (event) => {\r\n      if(!mouseDrag) return;\r\n      \r\n      currRow.classList.remove('is-dragging');\r\n      table.removeChild(dragElem);\r\n      \r\n      dragElem = null;\r\n      mouseDrag = false;\r\n    });    \r\n  }\r\n  \r\n  \r\n  function swapRow(row, index) {\r\n     let currIndex = Array.from(tbody.children).indexOf(currRow),\r\n         row1 = currIndex > index ? currRow : row,\r\n         row2 = currIndex > index ? row : currRow;\r\n         \r\n     tbody.insertBefore(row1, row2);\r\n  }\r\n    \r\n  function moveRow(x, y) {\r\n    dragElem.style.transform = \"translate3d(\" + x + \"px, \" + y + \"px, 0)\";\r\n    \r\n    let\tdPos = dragElem.getBoundingClientRect(),\r\n        currStartY = dPos.y, currEndY = currStartY + dPos.height,\r\n        rows = getRows();\r\n\r\n    for(var i = 0; i < rows.length; i++) {\r\n      let rowElem = rows[i],\r\n          rowSize = rowElem.getBoundingClientRect(),\r\n          rowStartY = rowSize.y, rowEndY = rowStartY + rowSize.height;\r\n\r\n      if(currRow !== rowElem && isIntersecting(currStartY, currEndY, rowStartY, rowEndY)) {\r\n        if(Math.abs(currStartY - rowStartY) < rowSize.height / 2)\r\n          swapRow(rowElem, i);\r\n      }\r\n    }    \r\n  }\r\n  \r\n  function addDraggableRow(target) {    \r\n      dragElem = target.cloneNode(true);\r\n      dragElem.classList.add('draggable-table__drag');\r\n      dragElem.style.height = getStyle(target, 'height');\r\n      dragElem.style.background = getStyle(target, 'backgroundColor');     \r\n      for(var i = 0; i < target.children.length; i++) {\r\n        let oldTD = target.children[i],\r\n            newTD = dragElem.children[i];\r\n        newTD.style.width = getStyle(oldTD, 'width');\r\n        newTD.style.height = getStyle(oldTD, 'height');\r\n        newTD.style.padding = getStyle(oldTD, 'padding');\r\n        newTD.style.margin = getStyle(oldTD, 'margin');\r\n      }      \r\n      \r\n      table.appendChild(dragElem);\r\n\r\n    \r\n      let tPos = target.getBoundingClientRect(),\r\n          dPos = dragElem.getBoundingClientRect();\r\n      dragElem.style.bottom = ((dPos.y - tPos.y) - tPos.height) + \"px\";\r\n      dragElem.style.left = \"-1px\";    \r\n    \r\n      document.dispatchEvent(new MouseEvent('mousemove',\r\n        { view: window, cancelable: true, bubbles: true }\r\n      ));    \r\n  }  \r\n  \r\n  \r\n  function getRows() {\r\n    return table.querySelectorAll('tbody tr');\r\n  }    \r\n  \r\n  function getTargetRow(target) {\r\n      let elemName = target.tagName.toLowerCase();\r\n\r\n      if(elemName == 'tr') return target;\r\n      if(elemName == 'td') return target.closest('tr');     \r\n  }\r\n  \r\n  function getMouseCoords(event) {\r\n    return {\r\n        x: event.clientX,\r\n        y: event.clientY\r\n    };    \r\n  }  \r\n  \r\n  function getStyle(target, styleName) {\r\n    let compStyle = getComputedStyle(target),\r\n        style = compStyle[styleName];\r\n\r\n    return style ? style : null;\r\n  }  \r\n  \r\n  function isIntersecting(min0, max0, min1, max1) {\r\n      return Math.max(min0, max0) >= Math.min(min1, max1) &&\r\n             Math.min(min0, max0) <= Math.max(min1, max1);\r\n  }  \r\n  \r\n  \r\n  \r\n  init();\r\n  \r\n})();\r\n</script>\r\n</body>\r\n\r\n\r\n`\r\n\r\nsetFormElement(\"new_variable\", template)\r\n\r\n$(\"div.note-editable\").height($(\".draggable-table\").height() * 2) ","after_load_jq":null,"on_sign":null,"is_mobile_compatible":false,"do_not_render_subform_inline":false,"instructions":"/* Part I. In which we begin the journey*/\nfunction getTableInfo(table_name, output_column) { \n// wrapper to getDataValue to pull column information from a custom virtual view we created\n  return getDataValue(\n    \"vv_condensed_table_columns\",\n    \"table_name\",\n    table_name, \n    output_column)\n}\n\nfunction getSourceComponent(txt, index) { \n// extracts table and column information from columns that come directly from the data source.\n// These columns are formatted like [table].column AS column0, so the match looks for letters, numbers, and _ between [brackets]\n// Returns an array, index 0 is the table, index 1 is the column in the data source\n  return txt.match(/(?<=\\[)[0-z]*(?=\\])/gi)[index]\n}\n\nfunction isDBField(source_definition) {\n// Identifies columns that come directly from the data source, returning false if a calculated field\n// These columns are formatted like [table].column AS column0, so the match looks for letters, numbers, and _ between [brackets]\n// Returns an array, index 0 is the table, index 1 is the column in the data source\n  return /^\\[[0-z_]*\\]\\.\\[[0-z_]*\\] as \\[[0-z_]*$/gi.test(source_definition)\n}\n\nfunction getCorrespondingEntry(fromObject, reference) {\n// looks up a corresponding value from object that has the same name as in the reference object\n  return fromObject[\n      Object.keys(fromObject).\n      find(key => reference.match(key))\n    ]\n}\n\nfunction getColumnTitle(row) {\n  return $(\".report-designer-drag-cell :first-child\", row).attr(\"title\")\n}\n\nwindow.name = (\"myEvolv Main\")\n\n// get all data sources into a grouped object\nvar data_sources = Object.groupBy( // takes an array of objects with similar properties and converts into an object with keys representing groupings and each value is an array of the original objects\n  $(\"#report-designer-data-sources-id tbody tr\"). // look for rows in the body of the data sources table\n    map(function(){ // over each row of the table\n      return { // get an object representing the table name, column count, and a collecton of key-value pairs representing each column and its order in the original table\n        table:this.outerText,\n        col_count:getTableInfo(this.textContent, \"col_count\"),\n        cols:Object.fromEntries(\n          getTableInfo(this.textContent, \"columns\").\n            split(\",\").\n            map(x => x.split(\":\"))\n          )\n        }\n      }\n    ).toArray(), // convert result from JQuery object to an array\n  ({table}) => table // use table name as the grouping value and name for groups\n)\n\nvar report_columns = $(\"#report-designer-columns-0-id tbody tr\") // get rows from the report columns table\n\n// get distinct data source aliases from table fields\n// iterates through the data sources table, keeping only fields that come directly from the source table\n// groups result by common source tables, then uses the grouped object keys as unique table names\n// if two columns from the same table appear in the list (e.g., people1.first_name and people1.last_name), the table alias will only appear once\n// if a table is used twice with separate auto-generated aliases (e.g., people1 and people2), the two instances are preserved\nvar aliases = \n  Object.keys(\n    Object.groupBy(\n      report_columns.\n        map(function(i, row) {\n          return getColumnTitle(row)\n        }).\n        filter(function(i) {\n          return (isDBField(this)) \n        }).\n        map(function () {\n          let table = getSourceComponent(this, 0)\n          let column = getSourceComponent(this, 1)\n          return {table:table, column:column}\n        }).\n        toArray(), \n    ({ table }) => table)\n  )\n  \nOpenFormGeneric(Form.formObject.serverHandling, \"Sorting\", null, \"EDIT\")\n/* End of Part I. Please sort tables in the popup window, then insert Disc 2 to continue the adventure.*/\n\n/* Part II\nIn the last installment, our intrepid hero(ine)(s) collected information about the data sources in the report and obtained table aliases from the Report Columns. After an exciting detour to put the aliased tables in a desired order, we continue the adventure.\n*/\n// create offsets for each data source to add to all column indices, starting at 0 for the main table for the report\nvar running_total = 0\n\n// iterate through the distinct aliases found and compute a running total of the column counts for all tables before the current one.\n// result is an object with key of table name and value of offset to add to each column's display order\nvar offsets = Object.fromEntries(aliases.map(alias => {\n  let temp_total = running_total\n  running_total += parseInt(getCorrespondingEntry(data_sources, alias)[0].col_count)\n  return [alias, temp_total]\n  })\n)\n\n// overwrite existing column order with orders calculated from schema ordering + offset\nreport_columns.\n    each(function(i, row) { // for each row of the report columns table\n      // extract table and column name\n      let title = getColumnTitle(row)\n      let table = getSourceComponent(title, 0)\n      let column = getSourceComponent(title, 1)\n      if(isDBField(title)) { // if this field comes directly from a source table,\n        // look up the table information in the data sources object and get the display order value for the column\n        let tbl =  getCorrespondingEntry(data_sources, table)[0]\n        let val = parseInt(tbl?.cols[column]) + getCorrespondingEntry(offsets, table)\n        var order = val\n    } else { // if this is not directly from a data source, append the column to the end of the list\n          let temp = running_total\n          running_total++\n          var order = temp\n    }\n        $(\"td [aria-label='Order']\", row).val(order) // set the order value\n    }\n  )\n\n// optional final step: set all columns except unique IDs to be visible in table\nreport_columns.\n  map(function (i, row) {\n    let title = getColumnTitle(row)\n    let column = getSourceComponent(title, 1)\n    let visible = $(\"[aria-label='Visible?']\", row)\n     if (visible.is(\":checked\") == /_id\\d*$/gi.test(column)) {\n         return visible.trigger(\"click\")\n       }\n     }\n  )","xml_element_name":null,"is_copy_enabled":false,"is_used_for_api":false}],"form_lines":[{"form_lines_id":"485c3b70-81dd-4bbe-fce2-10307efd4c4e","dd_columns_id":null,"caption":"Group 1","is_group_header":true,"belongs_to":null,"line_order":1,"user_defined":true,"form_header_id":"447a3187-29a9-48ec-99d6-9b6b25aad0bb","scrnval_id":null,"display_size":null,"instructions":null,"is_required":false,"use_event_log":false,"field_height":null,"field_width":null,"field_top":null,"is_modifiable":true,"depends_on":null,"is_visible":true,"is_add_only":false,"use_variable":false,"variable_name":null,"variable_datatypes":null,"is_picklist":false,"update_log_id":"80720f4e-1c10-4b61-951d-6b9cb1bf02c3","is_listed":true,"dt_tm":"2023-11-02T09:26:29.697","is_system":false,"onchange_event":null,"onblur_event":null,"onclick_event":null,"default_value":null,"sub_form_header_id":null,"sub_form_family_id":null,"formset2call":null,"use_event_log_table_id":null,"type_code":null,"sql_function":null,"dd_datatypes_id":null,"is_foreign_key":false,"referenced_column":null,"column_name":null,"depend_column_name":null,"sub_test_header_id":null,"sub_test_family_id":null,"depends_on_other":null,"event_category_id":null,"event_groups_id":null,"form2call":null,"sub_report_header_id":null,"data_seed_id":null,"apply_default_on_save":false,"is_order_by":false,"caption_defran":"Group 1","is_defran_required":false,"is_form_tab":false,"sub_tplan_header_id":null,"max_size":null,"use_events2do":false,"disable_rule":null,"copied_from_form_lines_id":null,"is_subform_visible":false,"sub_form_program":null,"is_erased_on_disable":false,"is_order_desc":false,"is_deleted":false,"is_defran_form_tab":false,"defran_line_order":1,"is_defran_subform_visible":false,"is_defran_visible":true,"is_defran_modifiable":false,"is_defran_listed":false,"is_defran_show_as_tab":false,"is_defran_required_control":false,"is_embedded":false,"is_line_reordered_by_user":false,"is_pagebreak":false,"onload_event":null,"is_filtered":false,"is_imported":false,"original_evolv_cs_id":null,"link_form_header_id":null,"dt_tm_tzo":null,"is_tplan_review_carryover":false,"is_tplan_review_enabled":false,"is_tplan_revise_enabled":false,"is_tplan_continue_enabled":false,"is_tplan_initial_disabled":false,"depends_on_other_jq":null,"onchange_event_jq":null,"onblur_event_jq":null,"onclick_event_jq":null,"default_value_jq":null,"disable_rule_jq":null,"onload_event_jq":null,"refresh_dependencies":true,"use_parent_value":false,"is_subject_education_resources":false,"default_value_exec_server":false,"original_int_id":0,"is_active":true,"is_invisible_subform":false,"is_label_printing_enabled":false,"use_event_forms":false,"render_lut_as_radio_buttons":false,"render_full_row":false,"suppress_from_print":false,"is_single_row":false,"xml_element_name":null,"xml_parent_element_name":null,"xml_nest_under_form_group":false,"xml_nest_under_form_header":false,"is_copy_enabled":false,"is_event_cross_program_allowed":false},{"form_lines_id":"922dc5c6-7f47-4667-ff4b-c44d1a3afe30","dd_columns_id":null,"caption":"Memo","is_group_header":false,"belongs_to":"485c3b70-81dd-4bbe-fce2-10307efd4c4e","line_order":3,"user_defined":true,"form_header_id":"447a3187-29a9-48ec-99d6-9b6b25aad0bb","scrnval_id":null,"display_size":99,"instructions":null,"is_required":false,"use_event_log":false,"field_height":null,"field_width":null,"field_top":null,"is_modifiable":true,"depends_on":null,"is_visible":true,"is_add_only":false,"use_variable":true,"variable_name":"new_variable","variable_datatypes":"7af09726-743f-4620-ba3f-aaa099b56433","is_picklist":false,"update_log_id":"818951c9-49b9-48af-a2f0-0b352e113ce4","is_listed":false,"dt_tm":"2023-11-02T09:26:30.113","is_system":false,"onchange_event":"","onblur_event":null,"onclick_event":"","default_value":"","sub_form_header_id":null,"sub_form_family_id":null,"formset2call":null,"use_event_log_table_id":null,"type_code":"M                   ","sql_function":null,"dd_datatypes_id":null,"is_foreign_key":false,"referenced_column":null,"column_name":null,"depend_column_name":null,"sub_test_header_id":null,"sub_test_family_id":null,"depends_on_other":null,"event_category_id":null,"event_groups_id":null,"form2call":null,"sub_report_header_id":null,"data_seed_id":null,"apply_default_on_save":false,"is_order_by":false,"caption_defran":"Memo","is_defran_required":false,"is_form_tab":false,"sub_tplan_header_id":null,"max_size":null,"use_events2do":false,"disable_rule":"","copied_from_form_lines_id":null,"is_subform_visible":false,"sub_form_program":null,"is_erased_on_disable":false,"is_order_desc":false,"is_deleted":false,"is_defran_form_tab":false,"defran_line_order":3,"is_defran_subform_visible":false,"is_defran_visible":false,"is_defran_modifiable":false,"is_defran_listed":false,"is_defran_show_as_tab":false,"is_defran_required_control":false,"is_embedded":false,"is_line_reordered_by_user":false,"is_pagebreak":false,"onload_event":"","is_filtered":false,"is_imported":false,"original_evolv_cs_id":null,"link_form_header_id":null,"dt_tm_tzo":null,"is_tplan_review_carryover":false,"is_tplan_review_enabled":false,"is_tplan_revise_enabled":false,"is_tplan_continue_enabled":false,"is_tplan_initial_disabled":false,"depends_on_other_jq":null,"onchange_event_jq":null,"onblur_event_jq":null,"onclick_event_jq":null,"default_value_jq":null,"disable_rule_jq":null,"onload_event_jq":null,"refresh_dependencies":true,"use_parent_value":false,"is_subject_education_resources":false,"default_value_exec_server":false,"original_int_id":0,"is_active":true,"is_invisible_subform":false,"is_label_printing_enabled":false,"use_event_forms":false,"render_lut_as_radio_buttons":false,"render_full_row":false,"suppress_from_print":false,"is_single_row":false,"xml_element_name":null,"xml_parent_element_name":null,"xml_nest_under_form_group":false,"xml_nest_under_form_header":false,"is_copy_enabled":false,"is_event_cross_program_allowed":false}]}]